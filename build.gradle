buildscript {
    ext.kotlin_version = '1.5.0'

    repositories {
        jcenter()
        mavenCentral()
        google()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:4.2.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")

        classpath("androidx.navigation:navigation-safe-args-gradle-plugin:2.3.5")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }

}

//allprojects {
//    repositories {
//        jcenter()
//        mavenCentral()
//        google()
//    }
//
//    tasks.withType<org.jetbrains.kotlin.gradle.dsl.KotlinCompile<*>> {
//        kotlinOptions {
//            freeCompilerArgs = listOf(
//                    "-Xuse-experimental=kotlin.ExperimentalStdlibApi",
//                    "-Xuse-experimental=kotlin.time.ExperimentalTime"
//            )
//        }
//    }
//}

//plugins {
//    id("jacoco")
//}
//
//// tag::coverageTask[]
//// task to gather code coverage from multiple subprojects
//// NOTE: the `JacocoReport` tasks do *not* depend on the `test` task by default. Meaning you have to ensure
//// that `test` (or other tasks generating code coverage) run before generating the report.
//// You can achieve this by calling the `test` lifecycle task manually
//// $ ./gradlew test codeCoverageReport
//tasks.register<JacocoReport>("codeCoverageReport") {
//    // If a subproject applies the 'jacoco' plugin, add the result it to the report
////    subprojects {
////        val subproject = this
////        subproject.plugins.withType<JacocoPlugin>().configureEach {
////            subproject.tasks.matching({ it.extensions.findByType<JacocoTaskExtension>() != null }).configureEach {
////                val testTask = this
////                sourceSets(subproject.sourceSets.main.get())
////                executionData(testTask)
////            }
////
////            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
////            // you may want to set up a task dependency between them as shown below.
////            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
////            // may have a negative effect on the configuration time of your build.
////            subproject.tasks.matching({ it.extensions.findByType<JacocoTaskExtension>() != null }).forEach {
////                rootProject.tasks["codeCoverageReport"].dependsOn(it)
////            }
////        }
////    }
//
//    // enable the different report types (html, xml, csv)
//    reports {
//        // xml is usually used to integrate code coverage with
//        // other tools like SonarQube, Coveralls or Codecov
//        xml.isEnabled = true
//
//        // HTML reports can be used to see code coverage
//        // without any external tools
//        html.isEnabled = true
//    }
//
//    sourceDirectories = files()
//    executionD = files("${buildDir}/jacoco/testUnitTest.exec")
////    classDirectories = fileTree(dir: variant.javaCompiler.destinationDir, excludes: autoGenerated)
//}
